{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectPost","selectedId","className","map","post","userId","title","type","onClick","id","NewCommentForm","postId","addNewComment","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","formError","setFormError","newComment","nanoid","name","email","body","value","placeholder","onChange","event","target","disabled","preventDefault","handleSubmit","BASE_URL","request","url","options","fetch","then","response","json","getPostComments","PostDetails","postInfo","setPostInfo","comments","setComments","commentVisibility","setCommentVisibility","useEffect","getPostDetails","result","removeComment","commentId","method","deleteComment","length","comment","headers","JSON","stringify","App","setPosts","selectedPostId","setPostId","users","setUsers","setUserId","getUserPosts","userName","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6114215.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/types';\n\ntype Props = {\n  posts: Post[];\n  selectPost: (postId: number) => void;\n  selectedId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  selectedId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                {`[User # ${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectPost(post.id);\n              }}\n            >\n              {post.id !== selectedId ? 'Open' : 'Close'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { nanoid } from 'nanoid';\nimport { Comment } from '../../types/types';\n\ntype Props = {\n  postId: number;\n  addNewComment: (newComment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addNewComment }) => {\n  const [newName, setNewName] = useState<string>('');\n  const [newEmail, setNewEmail] = useState<string>('');\n  const [newBody, setNewBody] = useState<string>('');\n  const [formError, setFormError] = useState<boolean>(false);\n\n  const newComment: Comment = {\n    postId,\n    id: +nanoid(),\n    name: newName,\n    email: newEmail,\n    body: newBody,\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (newComment.name && newComment.body && newComment.email) {\n      addNewComment(newComment);\n      setNewName('');\n      setNewEmail('');\n      setNewBody('');\n    } else {\n      setFormError(true);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={newName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewName(event.target.value);\n            setFormError(false);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={newEmail}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewEmail(event.target.value);\n            setFormError(false);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={newBody}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewBody(event.target.value);\n            setFormError(false);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className={!formError\n          ? 'NewCommentForm__submit-button button'\n          : 'NewCommentForm__submit-button button--formError'}\n        disabled={formError}\n        onClick={(event) => handleSubmit(event)}\n      >\n        Add a comment\n      </button>\n\n      {formError && (\n        <p className=\"FormError\">FIELDS CANNOT BE EMPTY</p>\n      )}\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => response.json());\n};\n","import { request } from './api';\nimport { Comment } from '../types/types';\n\nexport const getPostComments = (postId?: number | null) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (comment: Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { Post, Comment } from '../../types/types';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postInfo, setPostInfo] = useState<Post>({} as Post);\n  const [comments, setComments] = useState<Comment[]>([] as Comment[]);\n  const [commentVisibility, setCommentVisibility] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(result => setPostInfo(result));\n  }, [postId]);\n\n  useEffect(() => {\n    getPostComments(postId)\n      .then(result => setComments([...result]));\n  }, [postId]);\n\n  const commentDisplay = () => {\n    return commentVisibility\n      ? setCommentVisibility(false)\n      : setCommentVisibility(true);\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => getPostComments(postId)\n        .then(result => setComments(result)));\n  };\n\n  const addNewComment = (newComment: Comment) => {\n    addComment(newComment)\n      .then(() => getPostComments(postId)\n        .then(result => setComments(result)));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>\n          {postInfo.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={commentDisplay}\n            >\n              {commentVisibility ? 'Hide' : 'Show'}\n              {` ${comments.length} `}\n              {comments.length === 1 ? 'comment' : 'comments'}\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button--no_comments\"\n              disabled\n            >\n              No comments yet\n            </button>\n          )}\n\n        <ul className=\"PostDetails__list\">\n          {commentVisibility && (\n            comments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} addNewComment={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId?: number | null) => {\n  if (userId) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n};\n\nexport const getPostDetails = (postId?: number) => {\n  return request(`/posts/${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { Post, User } from './types/types';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState([] as Post[]);\n  const [selectedPostId, setPostId] = useState(0);\n  const [users, setUsers] = useState([] as User[]);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then(result => setPosts(result));\n  }, [userId]);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result));\n  }, []);\n\n  const selectPost = (postId: number) => {\n    if (postId === selectedPostId) {\n      setPostId(0);\n    } else {\n      setPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPost={selectPost}\n            selectedId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails postId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUsers = (userName?: string | null) => {\n  if (userName) {\n    return request(`/users?username=${userName}`);\n  }\n\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}